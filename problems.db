{"id":"fib","title":"Fibonacci","description":"Write the `fib` function to return the N'th term.\r\nWe start counting from:\r\n* fib(0) = 0\r\n* fib(1) = 1.\r\n\r\n### Examples\r\n\r\n* `0` -> `0`\r\n* `6` -> `8`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"fib","return":{"type":"java.lang.Long","comment":" N'th term of Fibonacci sequence"},"parameters":[{"name":"n","type":"java.lang.Integer","comment":"id of fibonacci term to be returned"}]},"test_cases":[{"input":["0"],"output":0},{"input":["1"],"output":1},{"input":["2"],"output":1},{"input":["3"],"output":2},{"input":["4"],"output":3},{"input":["5"],"output":5},{"input":["6"],"output":8},{"input":["20"],"output":6765},{"input":["40"],"output":102334155}],"_id":"01ima06jQggI6P1W"}
{"id":"number-of-leaves","title":"Count the Leaves","description":"Write a method `countLeaves` to find the total number of leaf nodes in a binary tree. If there is no leaf nodes, return 0..\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> # count = 4\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"countLeaves","return":{"type":"java.lang.Integer","comment":" Number of leaf nodes"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":4},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":2},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}],"_id":"0B6PnE0AZ9CuXNRl"}
{"id":"isomorphic-strings","title":"Isomorphic Strings","description":"Given two strings - input1 and input2, implement method `isIsomorphic` to determine if they are isomorphic. Two strings are isomorphic if the letters in one string can be remapped to get the second string. Remmapping a letter means replacing all occurrences of it with another letter. The ordering of the letters remains unchanged. You can also think of isomorphism as it is used in chemistry - i.e. having the same form or overall shape.\r\n\r\n### Examples\r\n\r\n* `'css', 'dll'` -> `true`\r\n* `'css', 'dle'` -> `false`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"isIsomorphic","return":{"type":"java.lang.Boolean","comment":" Indicate if strings are isomorphic"},"parameters":[{"name":"input1","type":"java.lang.String","comment":"input string 1 to be checked (ASCII)"},{"name":"input2","type":"java.lang.String","comment":"input string 2 to be checked (ASCII)"}]},"test_cases":[{"input":["","a"],"output":false},{"input":[null,""],"output":false},{"input":["",null],"output":false},{"input":["",""],"output":true},{"input":[null,null],"output":false},{"input":["css","dll"],"output":true},{"input":["css","dle"],"output":false},{"input":["abcabc","xyzxyz"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":true},{"input":["abcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyz","xyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabcxyzxyzbacabcxyzxyzabcabcxyzxyzabcabcxyzxyzabcabc"],"output":false},{"input":["abcabc","xyzxzy"],"output":false},{"input":["a","z"],"output":true}],"_id":"25iOzSor8mn7kI5h"}
{"id":"vertical-flip","title":"Vertical Flip","description":"Given an m x n 2D image matrix where each integer represents a pixel, write a method `flipVerticalAxis` to flip it in-place along its vertical axis.\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 0],\r\n [1, 0]]\r\n->\r\n[[0, 1],\r\n [0, 1]]\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"flipVerticalAxis","return":{"type":"void","comment":"Operation in-place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Image matrix to flip"}]},"test_cases":[{"input":[[[1,0],[0,1]]],"output":[[0,1],[1,0]]},{"input":[[[1,0],[1,0]]],"output":[[0,1],[0,1]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1,0,1],[1,1,0],[0,1,1]]],"output":[[1,0,1],[0,1,1],[1,1,0]]}],"_id":"4G3h1RVu81FTHKRt"}
{"id":"palindrome-list","title":"Palindrome List","description":"Implement method `isPalindrome` with algorithm to check if a linked list is a palindrome.\r\n\r\n### Examples\r\n\r\n* `0->1->2->1->0` -> `true`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"isPalindrome","return":{"type":"java.lang.Boolean","comment":" Indicates if input linked list is palindrome"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List to check if it's palindrome"}]},"test_cases":[{"input":[[0,1,2,1,0]],"output":true},{"input":[[0]],"output":true},{"input":[[]],"output":true},{"input":[[0,1,2,1,0,1,2,0,1,2,1,0]],"output":false},{"input":[[0,1,2,3,3,2,1,0]],"output":true},{"input":[[0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0]],"output":true},{"input":[[0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,7,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0]],"output":false}],"_id":"7eXQXFsZhGJXSFDt"}
{"id":"transpose-matrix","title":"Transpose Matrix","description":"You are given a square 2D image matrix where each integer represents a pixel. Write a method `transposeMatrix` to transform the matrix into its transpose - in-place. The transpose of a matrix is a matrix which is formed by turning all the rows of the source matrix into columns and vice-versa..\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 2, 3, 4],\r\n [5, 6, 7, 8],\r\n [9, 0, 1, 2],\r\n [3, 4, 5, 0]]\r\n->\r\n[[1, 5, 9, 3],\r\n [2, 6, 0, 4],\r\n [3, 7, 1, 5],\r\n [4, 8, 2, 0]]\r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"transposeMatrix","return":{"type":"void","comment":" Operation in place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Matrix to transpose"}]},"test_cases":[{"input":[[[1,2,3,4],[5,6,7,8],[9,0,1,2],[3,4,5,0]]],"output":[[1,5,9,3],[2,6,0,4],[3,7,1,5],[4,8,2,0]]},{"input":[[[0,2,3,4],[5,6,0,8],[9,0,1,2],[3,4,5,0]]],"output":[[0,5,9,3],[2,6,0,4],[3,0,1,5],[4,8,2,0]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1]]],"output":[[1]]},{"input":[[[1,0],[1,0]]],"output":[[1,1],[0,0]]}],"_id":"AJmqKFvnQZrTKjJE"}
{"id":"2-sum","title":"2 Sum","description":"Given an array of integers, find two numbers such that they add up to a specific target number.\r\n\r\nThe function `twoSum` should return indices of the two numbers such that they add up to the target, where *index1* must be less than *index2*. Please note that your returned answers (both *index1* and *index2*) are not zero-based.\r\n\r\n**Note**: You may assume that each input would have exactly one solution.\r\n\r\n### Example\r\n\r\n* `[2,7,11,15], 9` -> `[1,2]`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"twoSum","return":{"type":"[I","comment":" Indices of the two numbers"},"parameters":[{"name":"nums","type":"[I","comment":"An array of Integer"},{"name":"target","type":"java.lang.Integer","comment":"target = numbers[index1] + numbers[index2]"}]},"test_cases":[{"input":[[2,7,11,15],9],"output":[1,2]},{"input":[[1,0,-1],-1],"output":[2,3]},{"input":[[1,0,-1],0],"output":[1,3]},{"input":[[1,0,-1],1],"output":[1,2]},{"input":[[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99],-64],"output":[8,11]},{"input":[[1,2,33,23,2423,33,23,1,7,6,8787,5,33,2,3,-23,-54,-67,100,400],407],"output":[9,20]},{"input":[[-1,-2,-3,-4,-5,-6,-100,-98,-111,-11],-111],"output":[7,10]},{"input":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,9,9,9,10,11,1001,2001,198,201,203,201,999,345,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,1,1,1,1,1,1,1,1,1,1,1,101,1,1,1,1,1,1,1,1],107],"output":[78,90]}],"_id":"AOVELUoCJYgaX8wQ"}
{"id":"repeated-elements","title":"Repeated Elements","description":"Write a method `findDuplicates` to find the repeated or duplicate elements in an array. This method should return a list of repeated integers in a string with the elements sorted in ascending order.\r\n\r\n### Example\r\n\r\n* `[2,5,7,11,15,11,15]` -> `'[11, 15]'`\r\n* `[2,5,7]` -> `'[]'`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"findDuplicates","return":{"type":"java.lang.String","comment":" Array of sorted numbers representing duplicates in original array"},"parameters":[{"name":"arr","type":"[I","comment":"An array of Integers"}]},"test_cases":[{"input":[[2,5,7,11,15,11,15]],"output":"[11, 15]"},{"input":[[2,5,7,11,15,11,2,4,5]],"output":"[2, 5, 11]"},{"input":[[2,5,7,11,15,4]],"output":"[]"},{"input":[[7,5,2,2,5,7,7,7,2,2,5,5]],"output":"[2, 5, 7]"},{"input":[[]],"output":"[]"}],"_id":"APVgOE7O7t8094Qn"}
{"id":"reverse-list","title":"Reverse Linked List","description":"Given a singly linked list, write a method `reverseList` to reverse the list and return new head.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6` -> `6->5->4->3->2->1`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"reverseList","return":{"type":"org.algohub.engine.type.ListNode","comment":" Reversed linked list"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"}]},"test_cases":[{"input":[[1,2,3,4,5,6]],"output":[6,5,4,3,2,1]},{"input":[[1]],"output":[1]},{"input":[[1,2]],"output":[2,1]},{"input":[[2,2]],"output":[2,2]},{"input":[null],"output":null}],"_id":"BpBAuLXKdFl0FrHe"}
{"id":"binary-representation","title":"Binary Representation","description":"Write a method `computeBinary` to compute the binary representation of an integer. The method should return a string with 1s and 0s. Use the minimum number of binary digits needed for representation (truncate unnecessary trailing 0s).\r\n\r\n**Note**: using java framework to solve it is forbidden - you have to code it by yourself.\r\n\r\n### Example\r\n\r\n* `6` -> `'110'`\r\n* `5` -> `'101'`","time_limit":2,"memory_limit":32,"level":1,"function":{"name":"computeBinary","return":{"type":"java.lang.String","comment":" Binary representation"},"parameters":[{"name":"val","type":"java.lang.Integer","comment":"Input number"}]},"test_cases":[{"input":[5],"output":"101"},{"input":[6],"output":"110"},{"input":[-5],"output":"11111111111111111111111111111011"},{"input":[2147483647],"output":"1111111111111111111111111111111"},{"input":[0],"output":"0"},{"input":[10],"output":"1010"},{"input":[15],"output":"1111"},{"input":[52],"output":"110100"},{"input":[1],"output":"1"}],"_id":"CO2rSxMAbv3GRycl"}
{"id":"sum-lists-2","title":"Sum Lists 2","description":"You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in forward order, such that the 1's digit is at the tail of the list. Write method `addLists` that adds the two numbers and returns the sum as a linked list.\r\n\r\n### Examples\r\n\r\n* `6->1->7, 2->9->5` -> `9->1->2` (617 + 295 = 912)","time_limit":1,"memory_limit":32,"level":3,"function":{"name":"addLists","return":{"type":"org.algohub.engine.type.ListNode","comment":" linked list node containing result of sum"},"parameters":[{"name":"l1","type":"org.algohub.engine.type.ListNode","comment":"First Linked List to add"},{"name":"l2","type":"org.algohub.engine.type.ListNode","comment":"Second Linked List to add"}]},"test_cases":[{"input":[[6,1,7],[2,9,5]],"output":[9,1,2]},{"input":[[1,4,5,6,7],[1,3,9]],"output":[1,4,7,0,6]},{"input":[[1,4,5,6,7],[]],"output":[1,4,5,6,7]},{"input":[[1],[1,3,9]],"output":[1,4,0]},{"input":[[9],[1]],"output":[1,0]},{"input":[[],[]],"output":[]}],"_id":"EjOUEiSVRLUYj7oc"}
{"id":"remove-dups","title":"Remove Duplicates","description":"Write method `removeDuplicates` to remove duplicates from an unsorted linked list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->3->3` -> `1->2->3->4`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"removeDuplicates","return":{"type":"org.algohub.engine.type.ListNode","comment":" Linked List with removed duplicates"},"parameters":[{"name":"node","type":"org.algohub.engine.type.ListNode","comment":"Linked List where we need to remove duplicates"}]},"test_cases":[{"input":[[1,2,3,4,3,3]],"output":[1,2,3,4]},{"input":[[]],"output":[]},{"input":[[1,1,1,1]],"output":[1]},{"input":[[1,1,1,1,2,3,4,3,3]],"output":[1,2,3,4]},{"input":[[1,1,2,2,3,3,4,4,3,3]],"output":[1,2,3,4]},{"input":[[1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3,1,2,3,4,3,3]],"output":[1,2,3,4]}],"_id":"Ejnx4wBoJowutnRo"}
{"id":"insert-at-tail","title":"Insert Node at Tail","description":"Write a method `insertAtTail` to insert a node at the end of a singly linked list. Return the head of the modified list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6, 7` -> `1->2->3->4->5->6->7`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"insertAtTail","return":{"type":"org.algohub.engine.type.ListNode","comment":" New linked list"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"},{"name":"data","type":"java.lang.Integer","comment":"New value"}]},"test_cases":[{"input":[[1,2,3,4,5,6],7],"output":[1,2,3,4,5,6,7]},{"input":[[],2],"output":[2]},{"input":[[1],1],"output":[1,1]},{"input":[[5,3],5],"output":[5,3,5]}],"_id":"FCbfcVpavaMuajKx"}
{"id":"word-ladder","title":"Word Ladder","description":"Given two words (start and end), and a dictionary, write a method `ladderLength` to find the length of shortest transformation sequence from start to end, such that:\r\n* Only one letter can be changed at a time\r\n* Each intermediate word must exist in the dictionary\r\n* Including first word as one transformation\r\n\r\n### Examples\r\n\r\n* `\"a\", \"c\", [\"a\",\"b\",\"c\"]` -> `2`\r\n* `\"game\", \"thee\", [\"frye\",\"heat\",\"tree\",\"thee\",\"game\",\"free\",\"hell\",\"fame\",\"faye\"]` -> `7`","time_limit":1,"memory_limit":3200,"level":3,"function":{"name":"ladderLength","return":{"type":"java.lang.Integer","comment":"The shortest length"},"parameters":[{"name":"begin","type":"java.lang.String","comment":"the begin word"},{"name":"end","type":"java.lang.String","comment":"the end word"},{"name":"dict","type":"java.util.HashSet","comment":"the dictionary"}]},"test_cases":[{"input":["a","c",["a","b","c"]],"output":2},{"input":["hot","dog",["hot","cog","dog","tot","hog","hop","pot","dot"]],"output":3},{"input":["game","thee",["frye","heat","tree","thee","game","free","hell","fame","faye"]],"output":7},{"input":["kiss","tusk",["miss","dusk","kiss","musk","tusk","diss","disk","sang","ties","muss"]],"output":5},{"input":["teach","place",["peale","wilts","place","fetch","purer","pooch","peace","poach","berra","teach","rheum","peach"]],"output":4},{"input":["ta","if",["ts","sc","ph","ca","jr","hf","to","if","ha","is","io","cf","ta"]],"output":4},{"input":["qa","sq",["si","go","se","cm","so","ph","mt","db","mb","sb","kr","ln","tm","le","av","sm","ar","ci","ca","br","ti","ba","to","ra","fa","yo","ow","sn","ya","cr","po","fe","ho","ma","re","or","rn","au","ur","rh","sr","tc","lt","lo","as","fr","nb","yb","if","pb","ge","th","pm","rb","sh","co","ga","li","ha","hz","no","bi","di","hi","qa","pi","os","uh","wm","an","me","mo","na","la","st","er","sc","ne","mn","mi","am","ex","pt","io","be","fm","ta","tb","ni","mr","pa","he","lr","sq","ye"]],"output":5},{"input":["cet","ism",["kid","tag","pup","ail","tun","woo","erg","luz","brr","gay","sip","kay","per","val","mes","ohs","now","boa","cet","pal","bar","die","war","hay","eco","pub","lob","rue","fry","lit","rex","jan","cot","bid","ali","pay","col","gum","ger","row","won","dan","rum","fad","tut","sag","yip","sui","ark","has","zip","fez","own","ump","dis","ads","max","jaw","out","btu","ana","gap","cry","led","abe","box","ore","pig","fie","toy","fat","cal","lie","noh","sew","ono","tam","flu","mgm","ply","awe","pry","tit","tie","yet","too","tax","jim","san","pan","map","ski","ova","wed","non","wac","nut","why","bye","lye","oct","old","fin","feb","chi","sap","owl","log","tod","dot","bow","fob","for","joe","ivy","fan","age","fax","hip","jib","mel","hus","sob","ifs","tab","ara","dab","jag","jar","arm","lot","tom","sax","tex","yum","pei","wen","wry","ire","irk","far","mew","wit","doe","gas","rte","ian","pot","ask","wag","hag","amy","nag","ron","soy","gin","don","tug","fay","vic","boo","nam","ave","buy","sop","but","orb","fen","paw","his","sub","bob","yea","oft","inn","rod","yam","pew","web","hod","hun","gyp","wei","wis","rob","gad","pie","mon","dog","bib","rub","ere","dig","era","cat","fox","bee","mod","day","apr","vie","nev","jam","pam","new","aye","ani","and","ibm","yap","can","pyx","tar","kin","fog","hum","pip","cup","dye","lyx","jog","nun","par","wan","fey","bus","oak","bad","ats","set","qom","vat","eat","pus","rev","axe","ion","six","ila","lao","mom","mas","pro","few","opt","poe","art","ash","oar","cap","lop","may","shy","rid","bat","sum","rim","fee","bmw","sky","maj","hue","thy","ava","rap","den","fla","auk","cox","ibo","hey","saw","vim","sec","ltd","you","its","tat","dew","eva","tog","ram","let","see","zit","maw","nix","ate","gig","rep","owe","ind","hog","eve","sam","zoo","any","dow","cod","bed","vet","ham","sis","hex","via","fir","nod","mao","aug","mum","hoe","bah","hal","keg","hew","zed","tow","gog","ass","dem","who","bet","gos","son","ear","spy","kit","boy","due","sen","oaf","mix","hep","fur","ada","bin","nil","mia","ewe","hit","fix","sad","rib","eye","hop","haw","wax","mid","tad","ken","wad","rye","pap","bog","gut","ito","woe","our","ado","sin","mad","ray","hon","roy","dip","hen","iva","lug","asp","hui","yak","bay","poi","yep","bun","try","lad","elm","nat","wyo","gym","dug","toe","dee","wig","sly","rip","geo","cog","pas","zen","odd","nan","lay","pod","fit","hem","joy","bum","rio","yon","dec","leg","put","sue","dim","pet","yaw","nub","bit","bur","sid","sun","oil","red","doc","moe","caw","eel","dix","cub","end","gem","off","yew","hug","pop","tub","sgt","lid","pun","ton","sol","din","yup","jab","pea","bug","gag","mil","jig","hub","low","did","tin","get","gte","sox","lei","mig","fig","lon","use","ban","flo","nov","jut","bag","mir","sty","lap","two","ins","con","ant","net","tux","ode","stu","mug","cad","nap","gun","fop","tot","sow","sal","sic","ted","wot","del","imp","cob","way","ann","tan","mci","job","wet","ism","err","him","all","pad","hah","hie","aim","ike","jed","ego","mac","baa","min","com","ill","was","cab","ago","ina","big","ilk","gal","tap","duh","ola","ran","lab","top","gob","hot","ora","tia","kip","han","met","hut","she","sac","fed","goo","tee","ell","not","act","gil","rut","ala","ape","rig","cid","god","duo","lin","aid","gel","awl","lag","elf","liz","ref","aha","fib","oho","tho","her","nor","ace","adz","fun","ned","coo","win","tao","coy","van","man","pit","guy","foe","hid","mai","sup","jay","hob","mow","jot","are","pol","arc","lax","aft","alb","len","air","pug","pox","vow","got","meg","zoe","amp","ale","bud","gee","pin","dun","pat","ten","mob"]],"output":11}],"_id":"FVVa7tROEUlxS0bb"}
{"id":"postorder-traversal","title":"Postorder Traversal","description":"Given a binary tree, Write a method `postorderTraversal` to traverse the tree in the postorder manner. Return array of elements visited in postorder format.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> 4526731\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"postorderTraversal","return":{"type":"[I","comment":" Postordered array of binary tree elements"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":[4,5,2,6,7,3,1]},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7}}}],"output":[4,2,7,3,1]},{"input":[{"data":1}],"output":[1]},{"input":[null],"output":[]}],"_id":"H9Cqle9gdK43UVwF"}
{"id":"max-gain","title":"Max gain","description":"Given an array of integers, write a method `maxGain` that returns the maximum gain. Maximum Gain is defined as the maximum difference between 2 elements in a list such that the larger element appears after the smaller element. If no gain is possible, return 0.\r\n\r\n### Example\r\n\r\n* `[0,50,10,100,30]` -> `100`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"maxGain","return":{"type":"java.lang.Integer","comment":" Max gain"},"parameters":[{"name":"arr","type":"[I","comment":"An array of Integer"}]},"test_cases":[{"input":[[0,50,10,100,30]],"output":100},{"input":[[1,1]],"output":0},{"input":[[100,40,20,10]],"output":0},{"input":[[0,100,0,100,0,100]],"output":100},{"input":[[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99]],"output":172},{"input":[[1,2,33,23,2423,33,23,1,7,6,8787,5,33,2,3,-23,-54,-67,100,400]],"output":8786},{"input":[[-1,-2,-3,-4,-5,-6,-100,-98,-111,-11]],"output":100},{"input":[[]],"output":0},{"input":[[1]],"output":0},{"input":[null],"output":0},{"input":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,9,9,9,10,11,1001,2001,198,201,203,201,999,345,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,1,1,1,1,1,1,1,1,1,1,1,101,1,1,1,1,1,1,1,1]],"output":2001}],"_id":"JqAj28A2QpdeH8Us"}
{"id":"rotate-matrix","title":"Rotate Matrix","description":"Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method `rotate` to rotate the image by 90 degrees in place.\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 2, 3, 4],\r\n [5, 6, 7, 8],\r\n [9, 0, 1, 2],\r\n [3, 4, 5, 6]] \r\n->\r\n[[3, 9, 5, 1],\r\n [4, 0, 6, 2],\r\n [5, 1, 7, 3],\r\n [6, 2, 8, 4]]\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"rotate","return":{"type":"void","comment":" Operation in place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Image matrix to rotate"}]},"test_cases":[{"input":[[[1,2,3,4],[5,6,7,8],[9,0,1,2],[3,4,5,6]]],"output":[[3,9,5,1],[4,0,6,2],[5,1,7,3],[6,2,8,4]]},{"input":[[[1,2],[5,6]]],"output":[[5,1],[6,2]]},{"input":[[[0]]],"output":[[0]]}],"_id":"K11RAQjAZjLNjmPc"}
{"id":"string-rotation","title":"String Rotation","description":"Given two strings, s1 and s2, write method `isRotation` with algorithm checking if s2 is a rotation of s1.\r\n\r\n### Example\r\n\r\n* `'watterbottle', 'erbottlewatt'` -> `true`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"isRotation","return":{"type":"java.lang.Boolean","comment":" Is s2 rotation of s1"},"parameters":[{"name":"s1","type":"java.lang.String","comment":"s1 string"},{"name":"s2","type":"java.lang.String","comment":"s2 string"}]},"test_cases":[{"input":["watterbottle","erbottlewatt"],"output":true},{"input":["watterbottle","erbotlewat"],"output":false},{"input":["",""],"output":false},{"input":["","a"],"output":false},{"input":["aa","a"],"output":false},{"input":["watterbattle","erbottlewat"],"output":false},{"input":["stackoverflow","stackoverflwo"],"output":false}],"_id":"LTL0oRY6TiQkmmXS"}
{"id":"single-number","title":"Single Number","description":"Write a method `singleNumber` that returns a number that appears only once in an array. Assume that array will surely have a unique value. The array will never be empty..\r\n\r\n### Examples\r\n\r\n```\r\n[1,2,3,4,1,2,3,4,5]\r\n->\r\n5\r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"singleNumber","return":{"type":"java.lang.Integer","comment":"Single Number to find"},"parameters":[{"name":"arr","type":"[I","comment":"Array of integers with a single number"}]},"test_cases":[{"input":[[1,2,3,4,1,2,3,4,5]],"output":5},{"input":[[0,1,2,3,4,5,1,2,3,4,5]],"output":0},{"input":[[1,2,3,4,3,-2,4,5,1,2,3,4,5]],"output":-2},{"input":[[1]],"output":1}],"_id":"LvSxzECjqSHXVbgO"}
{"id":"snake","title":"Snake","description":"Write a method `findSpiral` to traverse a 2D matrix of ints in a clockwise spiral order and set the elements to an output array of integers.\r\n\r\n### Example\r\n\r\n``` \r\nInput Matrix : \r\n{1, 2, 3} \r\n{4, 5, 6} \r\n{7, 8, 9} \r\n\r\nOutput ArrayList:[1, 2, 3, 6, 9, 8, 7, 4, 5] \r\n ```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"findSpiral","return":{"type":"[I","comment":" Spiral Path as array"},"parameters":[{"name":"matrix","type":"[[I","comment":"An input matrix"}]},"test_cases":[{"input":[[[1,2,3,4],[5,6,7,8],[9,0,1,2],[3,4,5,0]]],"output":[1,2,3,4,8,2,0,5,4,3,9,5,6,7,1,0]},{"input":[[[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]]],"output":[1,2,3,4,5,6,12,18,17,16,15,14,13,7,8,9,10,11]},{"input":[[[0]]],"output":[0]},{"input":[[[]]],"output":[]},{"input":[[[1,0],[1,0]]],"output":[1,0,0,1]}],"_id":"Ma1AamjTcIU69pnV"}
{"id":"make-change","title":"Make Change","description":"Given an integer array containing the available denominations of coins in descending order, write a method `makeChange` to compute the number of possible ways of representing a monetary amount in cents. For simplicity, assume that there are an infinite number of coins available for each coin denomination in the array.\r\n\r\n### Example\r\n\r\n* `[25,10,5,1], 10` -> `4`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"makeChange","return":{"type":"java.lang.Integer","comment":" Number of possibilities"},"parameters":[{"name":"coins","type":"[I","comment":"An available denomination of coins"},{"name":"amount","type":"java.lang.Integer","comment":"Amount of money to change"}]},"test_cases":[{"input":[[25,10,5,1],10],"output":4},{"input":[[],10],"output":0},{"input":[null,10],"output":0},{"input":[[25,10,5,1],100],"output":242},{"input":[[10,5,1],-10],"output":0},{"input":[[10,5,1],0],"output":0},{"input":[[1,0],1],"output":1}],"_id":"QPemTd629tVtcHzn"}
{"id":"reverse-integer","title":"Reverse Integer","description":"Implement a method `twoSum` that reverses an integer - without using additonal heap space.\r\n\r\n### Example\r\n\r\n* `-123` -> `-321`\r\n* `123` -> `321`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"reverseInt","return":{"type":"java.lang.Integer","comment":" Reversed integer"},"parameters":[{"name":"x","type":"java.lang.Integer","comment":"Input value"}]},"test_cases":[{"input":[-123],"output":-321},{"input":[123],"output":321},{"input":[0],"output":0},{"input":[3000],"output":3},{"input":[-53000],"output":-35},{"input":[2147483640],"output":463847412},{"input":[2147483641],"output":1463847412},{"input":[-2147483640],"output":-463847412}],"_id":"SjhgpXPQzIOc5X8s"}
{"id":"kth-to-last","title":"Return Kth to Last","description":"Implement method `kthToLast` with algorithm to find the kth to last element of a singly linked list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6, 3` -> `3`\r\n\r\n### Notes\r\n\r\n* If index is absent, return 0.","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"kthToLast","return":{"type":"java.lang.Integer","comment":" kth to last element of a singly linked list"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List where we need to find kth to last element"},{"name":"k","type":"java.lang.Integer","comment":"index of element to find"}]},"test_cases":[{"input":[[1,2,3,4,5,6],3],"output":3},{"input":[[13,1,1,1,2,3,4,3,3],100],"output":0},{"input":[[12,1,2,2,3,3,4,4,3,1],1],"output":3},{"input":[[11,1,2,2,3,3,4,4,3,6],-1],"output":0},{"input":[[10,1,2,2,3,3,4,4,3,6],8],"output":1},{"input":[[101,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1,10,1,2,2,3,3,4,4,3,6,1],219],"output":101}],"_id":"T1YE4peH7Y93bK3h"}
{"id":"horizontal-flip","title":"Horizontal Flip","description":"Given an m x n 2D image matrix where each integer represents a pixel, write a method `flipHorizontalAxis` to flip it in-place along its horizontal axis.\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 0],\r\n [0, 1]]\r\n->\r\n[[0, 1],\r\n [1, 0]]\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"flipHorizontalAxis","return":{"type":"void","comment":"Operation in-place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Image matrix to flip"}]},"test_cases":[{"input":[[[1,0],[0,1]]],"output":[[0,1],[1,0]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1,0,1],[1,1,0],[0,1,1]]],"output":[[0,1,1],[1,1,0],[1,0,1]]}],"_id":"TCPA99r8H4zTSJqi"}
{"id":"binary-search","title":"Binary Search","description":"Write a method `binarySearch` that searches an array of integers for a given integer using the Binary Search Algorithm. If the input integer is found in the array - return index of that item. Otherwise, return -1.\r\n\r\n**Note**: You may assume that the given array of integers is already sorted in ascending order.\r\n\r\n### Example\r\n\r\n* `[2,5,7,11,15], 11` -> `3`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"binarySearch","return":{"type":"java.lang.Integer","comment":" Index of element if found or -1 if absent"},"parameters":[{"name":"arr","type":"[I","comment":"An array of Integers"},{"name":"n","type":"java.lang.Integer","comment":"element to find"}]},"test_cases":[{"input":[[2,5,7,11,15],11],"output":3},{"input":[[2,5,7,11,15],15],"output":4},{"input":[[2,5,7,11,15],13],"output":-1},{"input":[[2],13],"output":-1},{"input":[[2],2],"output":0},{"input":[[],5],"output":-1},{"input":[[1,2,2,3],2],"output":1}],"_id":"UBBBbEQnQxirBf0o"}
{"id":"one-away","title":"One Away","description":"There are three types of edits that can be performed on strings: \r\n* insert a character\r\n* remove a character\r\n* replace a character. \r\n\r\nGiven two strings, write a method `oneEditAway` to check if they are one edit (or zero edits) away.\r\n\r\n### Examples\r\n\r\n* `\"pale\", \"ple\"` -> `true`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"oneEditAway","return":{"type":"java.lang.Boolean","comment":" Is first string one or zero edits away from the second?"},"parameters":[{"name":"first","type":"java.lang.String","comment":"first string"},{"name":"second","type":"java.lang.String","comment":"second string"}]},"test_cases":[{"input":["pale","ple"],"output":true},{"input":["pales","pale"],"output":true},{"input":["pale","bale"],"output":true},{"input":["pale","bake"],"output":false},{"input":["pale","bae"],"output":false},{"input":["bae","pale"],"output":false},{"input":["p",""],"output":true},{"input":["","p"],"output":true},{"input":["","pa"],"output":false},{"input":["Julia","juliA"],"output":false}],"_id":"UW2QCvlBvtGaJ192"}
{"id":"stoi","title":"String to Integer (stoi)","description":"Implement method `stoi` to convert a string to an integer.\r\n\r\n**Hint**: Carefully consider all possible input cases. If you want a challenge.\r\n\r\n**Notes**: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.\r\n\r\n### Examples\r\n\r\n* `\"1\"` -> `1`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"stoi","return":{"type":"java.lang.Integer","comment":"An integer"},"parameters":[{"name":"str","type":"java.lang.String","comment":"A string"}]},"test_cases":[{"input":[""],"output":0},{"input":["1"],"output":1},{"input":["+1"],"output":1},{"input":["-1"],"output":-1},{"input":["123"],"output":123},{"input":["-123"],"output":-123},{"input":["+-2"],"output":0},{"input":["010"],"output":10}],"_id":"WN2owyehnrBIYQo3"}
{"id":"validate-bst","title":"BST Validation","description":"Given a binary tree, write a method `validateBST` to determine if it is a Binary Search Tree.\r\n\r\n### Example\r\n\r\n ```  \r\n     20 \r\n    /   \\ \r\n  15    30 \r\n /  \\ \r\n14  18   \r\n  \r\noutput ==> true\r\n\r\n      20\r\n     /   \\ \r\n   30    15 \r\n  /  \\ \r\n14  18 \r\n    \r\noutput ==> false \r\n\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"validateBST","return":{"type":"java.lang.Boolean","comment":" Is a binary search tree"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":5,"left":{"data":3,"left":{"data":2},"right":{"data":4}},"right":{"data":8,"left":{"data":6},"right":{"data":9}}}],"output":true},{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":10},"right":{"data":7}}}],"output":false},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":false},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":40}}}}],"output":false},{"input":[{"data":20,"left":{"data":15,"left":{"data":10},"right":{"data":30}},"right":{"data":40}}],"output":false},{"input":[{"data":20,"left":{"data":15,"left":{"data":10},"right":{"data":16}},"right":{"data":40}}],"output":true},{"input":[{"data":1}],"output":true},{"input":[null],"output":true}],"_id":"aBbtf2H4wgqxSauj"}
{"id":"palindrome-perm","title":"Palindrome Permutations","description":"Given a string, write a method `isPermutationOfPalindrome` to check if it is a permutation of a palindrome. \r\n\r\nThe palindrome does not need to be limited to just dictionary words (skip non-letter characters). Your solution should be case insensitive.\r\n\r\n### Examples\r\n\r\n* `\"Tact Coa\"` -> `true` (permutations: \"taco cat\", \"acto tca\", etc.)","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"isPermutationOfPalindrome","return":{"type":"java.lang.Boolean","comment":" Indicate if string is a permutation of palindrome"},"parameters":[{"name":"phrase","type":"java.lang.String","comment":"string to be checked if any permutation is palindrome"}]},"test_cases":[{"input":["abcabcd"],"output":true},{"input":["a"],"output":true},{"input":["Aa"],"output":true},{"input":[""],"output":false},{"input":["cxzwcxzwcxzwcxzwa"],"output":true},{"input":["cxzwcxzwcxzwcxzwab"],"output":false},{"input":["Tact Coa"],"output":true},{"input":["Tact Coa&"],"output":true}],"_id":"ba3ZlVSpwuGDKTnq"}
{"id":"delete-tail-node","title":"Delete List Tail Node","description":"Given a singly linked list, write a method `deleteAtTail` to delete its last node and return the head.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6` -> `1->2->3->4->5`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"deleteAtTail","return":{"type":"org.algohub.engine.type.ListNode","comment":" Initial linked list with removed tail"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"}]},"test_cases":[{"input":[[1,2,3,4,5,6]],"output":[1,2,3,4,5]},{"input":[[1]],"output":[]},{"input":[[]],"output":[]},{"input":[[5,3]],"output":[5]}],"_id":"bnLYmMJCq2nnJfic"}
{"id":"boggle-search","title":"Boggle Search","description":"You're given a 2D Boggle Board which contains an m x n matrix of chars - char[][] board, and a String - word. Write a method - `boggleSearch` that searches the Boggle Board for the presence of the input word. Words on the board can be constructed with sequentially adjacent letters, where adjacent letters are horizontal or vertical neighbors (not diagonal). Also, each letter on the Boggle Board must be used only once.\r\n\r\n### Examples\r\n\r\n``` \r\n\r\nInput Board : \r\n[ \r\n    [A, O, L], \r\n    [D, E, L], \r\n    [G, H, I] \r\n] \r\nWord: \"HELLO\" \r\nOutput: true \r\n```","time_limit":1,"memory_limit":32,"level":3,"function":{"name":"boggleSearch","return":{"type":"java.lang.Boolean","comment":" Is the word present"},"parameters":[{"name":"board","type":"[[C","comment":"Boggle Board"},{"name":"word","type":"java.lang.String","comment":"Word to find"}]},"test_cases":[{"input":[[["A","O","L"],["D","E","L"],["G","H","I"]],"HELLO"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"JACK"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"AXE"],"output":false},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"ROCKS"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"DFS"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"ROCK"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"FIRES"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"SEE"],"output":true},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"JACKET"],"output":false},{"input":[[["A","F","A","J"],["S","I","V","A"],["E","R","O","C"],["C","X","E","K"],["O","D","F","S"],["D","E","E","E"]],"FIRECODE"],"output":true}],"_id":"cCGXdIdjACa11HW8"}
{"id":"delete-head-node","title":"Delete List Head Node","description":"Given a singly linked list, write a method `deleteAtHead` to delete its head node and return the new head.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6` -> `2->3->4->5->6`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"deleteAtHead","return":{"type":"org.algohub.engine.type.ListNode","comment":" Initial linked list with removed head"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"}]},"test_cases":[{"input":[[1,2,3,4,5,6]],"output":[2,3,4,5,6]},{"input":[[1]],"output":[]},{"input":[[]],"output":[]},{"input":[[5,3]],"output":[3]}],"_id":"eR37rvMnEWTuUjms"}
{"id":"count-paths","title":"Count Paths","description":"You're given a game board that has m x n squares on it, represented by an m x n array. Write a method `countPaths` that takes in m and n and returns the number of possible paths from the top left corner to the bottom right corner. Only down and right directions of movement are permitted.\r\n\r\n### Examples\r\n\r\n``` \r\n countPaths(m = 2, n = 2) => 2 \r\n  \r\n as on the following 2x2 Board, the two paths are A->C->D and A->B->D \r\n  \r\n A B \r\n C D \r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"countPaths","return":{"type":"java.lang.Integer","comment":" Number of paths"},"parameters":[{"name":"m","type":"java.lang.Integer","comment":"Number of rows"},{"name":"n","type":"java.lang.Integer","comment":"Number of columns"}]},"test_cases":[{"input":[1,1],"output":1},{"input":[7,15],"output":38760},{"input":[3,5],"output":15},{"input":[10,12],"output":167960},{"input":[15,16],"output":77558760},{"input":[5,3],"output":15},{"input":[4,1],"output":1},{"input":[2,2],"output":2},{"input":[18,17],"output":1166803110},{"input":[12,6],"output":4368},{"input":[8,10],"output":11440},{"input":[0,0],"output":0},{"input":[1,0],"output":0},{"input":[0,1],"output":0}],"_id":"grODmlB5dkdWCe8X"}
{"id":"delete-at-middle","title":"Delete Node at Middle","description":"Given a singly linked list, write a method `deleteAtMiddle` to delete the node at a given position (starting from 1 as the head position) and return the head of the list. Do nothing if the input position is out of range.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6, 3` -> `1->2->4->5->6`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"deleteAtMiddle","return":{"type":"org.algohub.engine.type.ListNode","comment":" New Linked List with removed node at given position"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"},{"name":"position","type":"java.lang.Integer","comment":"Position of node to be removed"}]},"test_cases":[{"input":[[1,2,3,4,5,6],3],"output":[1,2,4,5,6]},{"input":[[1,2,3,4,5,6],1],"output":[2,3,4,5,6]},{"input":[[1,2,3,4,5,6],6],"output":[1,2,3,4,5]},{"input":[[1],3],"output":[1]},{"input":[[1],1],"output":null},{"input":[null,1],"output":null}],"_id":"h1aRwrFrvBA1cihs"}
{"id":"sum-binary-tree","title":"Sum of a binary tree","description":"Given a binary tree, write a method `sum` to find and return the sum of all elements. For an empty tree return 0.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> sum = 28\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"sum","return":{"type":"java.lang.Integer","comment":" Sum of all binary tree elements"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":28},{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":-5}},"right":{"data":3,"left":{"data":6},"right":{"data":-7}}}],"output":4},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":23},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}],"_id":"h2gFSmAhlzLYLsDG"}
{"id":"happy-numbers","title":"Happy Numbers","description":"Write a method `isHappyNumber` to determine whether a positive number is `Happy`. A number is Happy (Yes, it is a thing!) if it follows a sequence that ends in 1 after following the steps given below:\r\n\r\bBeginning with the number itself, replace it by the sum of the squares of its digits until either the number becomes 1 or loops endlessly in a cycle that does not include 1. For instance, 19 is a happy number. Sequence:\r\n12 + 92 = 82\r\n8^2 + 2^2 = 68\r\n6^2 + 8^2 = 100\r\n1^2 + 0^2 + 0^2 = 1.\r\n\r\n### Examples\r\n\r\n* `19` -> `true`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"isHappyNumber","return":{"type":"java.lang.Boolean","comment":" Is happy number"},"parameters":[{"name":"head","type":"java.lang.Integer","comment":"Input number"}]},"test_cases":[{"input":[19],"output":true},{"input":[28],"output":true},{"input":[68],"output":true},{"input":[12],"output":false},{"input":[100],"output":true},{"input":[12352],"output":false},{"input":[0],"output":false}],"_id":"hDf7hDQsBaHPfyZD"}
{"id":"first-non-repeated-char","title":"First Non Repeated Character","description":"Write a method `findFirstNonRepeatedChar` that finds the first non-duplicate character in a string. Return null if no unique character is found.\r\n\r\n### Example\r\n\r\n* `'asdsdakz` -> `'k'`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"findFirstNonRepeatedChar","return":{"type":"java.lang.String","comment":" First non-duplicate character or null if absent"},"parameters":[{"name":"str","type":"java.lang.String","comment":"Input string"}]},"test_cases":[{"input":["asdsdakz"],"output":"k"},{"input":["asdsda"],"output":null},{"input":["asd"],"output":"a"},{"input":[""],"output":null},{"input":[null],"output":null}],"_id":"hEW0S8uKEqVu76Dd"}
{"id":"inorder-traversal","title":"Inorder Traversal","description":"Given a binary tree, Write a method `inorderTraversal` to traverse the tree in the inorder manner. Return array of elements visited in inorder format.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> 4251637\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"inorderTraversal","return":{"type":"[I","comment":" Inordered array of binary tree elements"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":[4,2,5,1,6,3,7]},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7}}}],"output":[4,2,1,3,7]},{"input":[{"data":1}],"output":[1]},{"input":[null],"output":[]}],"_id":"ioUDtlcpD6Oxp2a6"}
{"id":"preorder-traversal","title":"Preorder Traversal","description":"Given a binary tree, Write a method `preorderTraversal` to traverse the tree in the preorder manner. Return array of elements visited in preorder format.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> 1245367\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"preorderTraversal","return":{"type":"[I","comment":" Preordered array of binary tree elements"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":[1,2,4,5,3,6,7]},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7}}}],"output":[1,2,4,3,7]},{"input":[{"data":1}],"output":[1]},{"input":[null],"output":[]}],"_id":"lWwwIYyx6GRoUD0T"}
{"id":"sort-array","title":"Sort Array","description":"Write method `sort` to sorg given array.\r\n\r\n**Note**: You cannot use `Arrays.sort` or any other framework method to do that - you have to implement it.\r\n\r\n### Example\r\n\r\n* `[44,2,22,7,11,15]` -> `[2,7,11,15,22,44]`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"sort","return":{"type":"[I","comment":" Sorted array"},"parameters":[{"name":"arr","type":"[I","comment":"An array to sort"}]},"test_cases":[{"input":[[44,2,22,7,11,15]],"output":[2,7,11,15,22,44]},{"input":[[1]],"output":[1]},{"input":[[]],"output":[]},{"input":[null],"output":null},{"input":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,9,9,9,10,11,1001,2001,198,201,203,201,999,345,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,1,1,1,1,1,1,1,1,1,1,1,101,1,1,1,1,1,1,1,1]],"output":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,4,5,6,9,9,9,10,11,101,198,201,201,203,345,999,1001,2001]}],"_id":"p1bFqTIM0N5Ofix3"}
{"id":"string-compress","title":"String Compression","description":"Implement a method `compress` to perform basic string compression using the counts of repeated characters. \r\n\r\nIf the **compressed** string would not become smaller than original string, your method should return original string. \r\n\r\n**Note**: You can assume the string has only uppercase and lowercase letters (a-z).\r\n\r\n### Examples\r\n\r\n* `\"aabcccccaaa\"` -> `\"a2b1c5a3\"`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"compress","return":{"type":"java.lang.String","comment":" Compressed string."},"parameters":[{"name":"str","type":"java.lang.String","comment":"String to compress"}]},"test_cases":[{"input":["aabcccccaaa"],"output":"a2b1c5a3"},{"input":["Julia"],"output":"Julia"},{"input":[""],"output":""},{"input":[null],"output":null},{"input":["JjuuLLiiiiAaaaaAAaaaaa"],"output":"J1j1u2L2i4A1a4A2a5"},{"input":["JjuuLLiiiiAaaaaAAaBCDEFG"],"output":"JjuuLLiiiiAaaaaAAaBCDEFG"},{"input":["JJJJJJJJJJJ"],"output":"J11"}],"_id":"pD7zesRyygwSmZVa"}
{"id":"sum-lists","title":"Sum Lists","description":"You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in reverse order, such that the 1's digit is at the head of the list. Write method `addLists` that adds the two numbers and returns the sum as a linked list.\r\n\r\n### Examples\r\n\r\n* `7->1->6, 5->9->2` -> `2->1->9` (617 + 295 = 912)","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"addLists","return":{"type":"org.algohub.engine.type.ListNode","comment":" linked list node containing result of sum"},"parameters":[{"name":"l1","type":"org.algohub.engine.type.ListNode","comment":"First Linked List to add"},{"name":"l2","type":"org.algohub.engine.type.ListNode","comment":"Second Linked List to add"}]},"test_cases":[{"input":[[7,1,6],[5,9,2]],"output":[2,1,9]},{"input":[[7,6,5,4,1],[9,3,1]],"output":[6,0,7,4,1]},{"input":[[7,6,5,4,1],[]],"output":[7,6,5,4,1]},{"input":[[1],[9,3,1]],"output":[0,4,1]},{"input":[[9],[1]],"output":[0,1]},{"input":[[],[]],"output":[]}],"_id":"pJptLCCbnzk2HUdf"}
{"id":"find-middle-node","title":"Find Middle Node","description":"Given a singly linked list, write a method `findMiddleNode` to find and return the middle node of the list.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5` -> `3->4->5`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"findMiddleNode","return":{"type":"org.algohub.engine.type.ListNode","comment":" Middle node"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Linked List head"}]},"test_cases":[{"input":[[1,2,3,4,5]],"output":[3,4,5]},{"input":[[1]],"output":[1]},{"input":[[1,2]],"output":[1,2]},{"input":[[]],"output":null},{"input":[null],"output":null},{"input":[[5,3,2,1]],"output":[3,2,1]}],"_id":"pnS6cCW2NsawqRGz"}
{"id":"height-binary-tree","title":"Height of a binary tree","description":"Given a binary tree, Write a method `findHeight` to find its height. An empty tree has a height of 0.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> height = 3\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"findHeight","return":{"type":"java.lang.Integer","comment":" Height of binary tree"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":3},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":4},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}],"_id":"q0c15ZOJLtzePWZX"}
{"id":"find-max","title":"Find Max Element","description":"Given a binary tree, write a method `findMax` to return maximum element. Return 0 for empty tree.\r\n\r\n### Example\r\n\r\n ```  \r\n      20 \r\n    /   \\ \r\n  15    30 \r\n /  \\ \r\n14  18   \r\n  \r\noutput ==> 30\r\n\r\n```","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"findMax","return":{"type":"java.lang.Integer","comment":" Max element of a binary tree"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":5,"left":{"data":3,"left":{"data":2},"right":{"data":4}},"right":{"data":8,"left":{"data":6},"right":{"data":9}}}],"output":9},{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":10},"right":{"data":7}}}],"output":10},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":7},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":40}}}}],"output":40},{"input":[{"data":20,"left":{"data":15,"left":{"data":10},"right":{"data":30}},"right":{"data":40}}],"output":40},{"input":[{"data":50,"left":{"data":15,"left":{"data":10},"right":{"data":16}},"right":{"data":40}}],"output":50},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}],"_id":"qn3d9GIgO5Wv22me"}
{"id":"is-cyclic","title":"Is List cyclic","description":"Given a singly linked list, write a method `isCyclic` to check if the list has cycles. The space complexity can be O(n). If there is a cycle, return true otherwise return false. Empty lists should be considered non-cyclic.\r\n\r\n### Examples\r\n\r\n* `1->2->3->4->5->6->1` -> `true`","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"reverseList","return":{"type":"java.lang.Boolean","comment":" Is List cyclic"},"parameters":[{"name":"head","type":"org.algohub.engine.type.ListNode","comment":"Input list"}]},"test_cases":[{"input":[[1,2,3,4,5,6]],"output":false},{"input":[[1,2,3,4,5,6,6]],"output":true},{"input":[[1,2,3,4,5,6,1]],"output":true},{"input":[[1,2,3,4,5,3,6]],"output":true},{"input":[[1]],"output":false},{"input":[[1,2]],"output":false},{"input":[[2,2]],"output":true},{"input":[null],"output":false}],"_id":"uR2KszhiYnO0h9UE"}
{"id":"max-sum-path","title":"Maximum sum path","description":"Given a binary tree, write a method `maxSumPath` that returns the maximum sum of data values obtained by traversing nodes along a path between any 2 nodes of the tree. The path must originate and terminate at 2 different nodes of the tree, and the maximum sum is obtained by summing all the data values of the nodes traversed along this path..\r\n\r\n### Example\r\n\r\n ``` \r\n     1 \r\n    / \\ \r\n   2   3     => 18 \r\n  / \\ / \\ \r\n 4  5 6  7 \r\n \r\nPath: 5 -> 2 -> 1 -> 3 -> 7 \r\nMax Sum = 5+2+1+3+7 = 18 \r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"maxSumPath","return":{"type":"java.lang.Integer","comment":" Sum of all elements in max path"},"parameters":[{"name":"root","type":"org.algohub.engine.type.TreeNode","comment":"Root of binary tree"}]},"test_cases":[{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":18},{"input":[{"data":1,"left":{"data":2,"left":{"data":4,"left":{"data":8},"right":{"data":9}},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}],"output":26},{"input":[{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":-5}},"right":{"data":3,"left":{"data":6},"right":{"data":-7}}}],"output":16},{"input":[{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7,"left":{"data":6}}}}],"output":23},{"input":[{"data":1}],"output":1},{"input":[null],"output":0}],"_id":"vqapaXAJ97D45f8E"}
{"id":"chocolate-bars","title":"Chocolate Bars","description":"A rectangular chocolate bar is divided into squares by horizontal and vertical grooves, in the usual way. It is to be cut into individual squares. A cut is made by choosing a piece and cutting along one of it grooves. (Thus each cut splits one piece into two pieces). Additionally, your chocolate is already cutted into two pieces. Write a method `countChocolateCuts` with a number answering question - what is the minimal number of cuts needed to completely cut the two parts of chocolate into all its squares?\r\n\r\n### Examples\r\n\r\n``` \r\n[[1] \r\n [1, 1, 1] \r\n [1]] \r\n&           ==> 8 \r\n[[1, 1, 1] \r\n       [1] \r\n [1, 1, 1]] \r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"countChocolateCuts","return":{"type":"java.lang.Integer","comment":" Number of cuts"},"parameters":[{"name":"chocolateBarPartOne","type":"[[I","comment":"Matrix representing first part of chocolate bar"},{"name":"chocolateBarPartTwo","type":"[[I","comment":"Matrix representing second part of chocolate bar"}]},"test_cases":[{"input":[[[1],[1,1,1],[1]],[[1,1,1],[1],[1,1,1]]],"output":8},{"input":[[[1,1,1,1],[1],[1,1,1],[1,1]],[[1,1,1],[1],[1,1]]],"output":10},{"input":[[[]],[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]],"output":6},{"input":[[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]],[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]],"output":12},{"input":[[[1]],[[1]]],"output":0},{"input":[[[0,0],[0,0]],[[0,0],[0,0]]],"output":4},{"input":[[[]],[[]]],"output":0}],"_id":"vvh9ezZBAtSTdsgc"}
{"id":"insert-stars","title":"Insert Stars","description":"Given a string, write a method `insertPairStar` to compute a new string where the identical adjacent characters in the original string are separated by a \"*\".\r\n\r\n### Example\r\n\r\n* `'sas` -> `'sas'`\r\n* `'kk` -> `'k*k'`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"insertPairStar","return":{"type":"java.lang.String","comment":" Computed string"},"parameters":[{"name":"str","type":"java.lang.String","comment":"Input string"}]},"test_cases":[{"input":["asdsdakz"],"output":"asdsdakz"},{"input":["aaaaa"],"output":"a*a*a*a*a"},{"input":["kk"],"output":"k*k"},{"input":["kkcckkcc"],"output":"k*kc*ck*kc*c"},{"input":[""],"output":""},{"input":[null],"output":null}],"_id":"w2Flu2g3U11lbmD1"}
{"id":"decompress-tree","title":"Tree Decompression","description":"Given a binary tree, write a method `decompressTree` that decompresses that tree (reconstructs the tree) and returns the root TreeNode. The compression algorithm included traversing the tree level by level, from the left to the right. The TreeNode's data values were appended to the String, delimited by commas. Also, null TreeNodes were denoted by appending an asterisk - *. The input String denotes the structure of a Full Binary Tree - i.e. a tree that is structurally balanced. However, the reconstructed tree may not be a full tree as the String included * characters, which represent null TreeNodes\r\n\r\n###Note\r\n\r\n You can assume that if a Binary Tree contains k levels, the compressed String will contain 2^k-1 elements - either numbers or *.\r\n\r\n### Example\r\n\r\n ```\r\n     1\r\n    / \\\r\n   2   3     ==> Compressed String = '1,2,3,4,5,6,7'\r\n  / \\ / \\\r\n 4  5 6  7 \r\n```","time_limit":1,"memory_limit":32,"level":3,"function":{"name":"decompressTree","return":{"type":"org.algohub.engine.type.TreeNode","comment":" Decompressed binary tree"},"parameters":[{"name":"root","type":"java.lang.String","comment":"Compressed Tree"}]},"test_cases":[{"input":["1,2,3,4,5,6,7"],"output":{"data":1,"left":{"data":2,"left":{"data":4},"right":{"data":5}},"right":{"data":3,"left":{"data":6},"right":{"data":7}}}},{"input":["1,2,3,4,*,*,7"],"output":{"data":1,"left":{"data":2,"left":{"data":4}},"right":{"data":3,"right":{"data":7}}}},{"input":["1"],"output":{"data":1}},{"input":["1,*,2,*,*,*,3"],"output":{"data":1,"right":{"data":2,"right":{"data":3}}}},{"input":[null],"output":null},{"input":["*"],"output":null},{"input":[""],"output":null}],"_id":"wGZI8dsUSLudK5C7"}
{"id":"check-perm","title":"Check Permutations","description":"Given two strings, write a method `permutation` to decide if one is a permutation of other.\r\n\r\n### Examples\r\n\r\n* `\"abc\", \"cba\"` -> `true`\r\n* `\"abc\", \"cb\"` -> `false`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"permutation","return":{"type":"java.lang.Boolean","comment":" Indicate if one string is a permutation of another"},"parameters":[{"name":"str1","type":"java.lang.String","comment":"first string to be checked for permutation match"},{"name":"str2","type":"java.lang.String","comment":"second string to be checked for permutation match"}]},"test_cases":[{"input":["abc","cba"],"output":true},{"input":["abc","cbacba"],"output":false},{"input":["abccba","cbaccb"],"output":false},{"input":["abc","cbad"],"output":false},{"input":["AdSda","dAdaS"],"output":true},{"input":["AbcdefgHA",""],"output":false},{"input":["",""],"output":true},{"input":["  "," "],"output":false},{"input":["A","A"],"output":true},{"input":["A","a"],"output":false},{"input":[" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~","0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ !\"#$%&'()*+,-./"],"output":true},{"input":[" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~a","0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"],"output":false}],"_id":"xYc8TpBUUbvZqfJx"}
{"id":"max-profit","title":"Stock Market Oracle","description":"You've recently acquired market prediction superpowers that let you predict the closing stock price of a Acme Inc.'s stock a month into the future! To get the most out of this superpower, you need to write a method called `maxProfit` that takes in an array of integers representing the close out stock price on a given day. This method should return the maximum profit you can make out of trading Acme Inc.'s stock. There are a few limitations however :\r\n\r\n1) You must sell your current holding before buying another - i.e. You may not buy and then buy again. It needs to be a buy - sell - buy - sell ... pattern.\r\n\r\n2) You may complete as many transactions as you like. You're using an awesome service like Robinhood, and so there are no transaction costs!\r\n\r\n3) If you're enormously unlucky (or karma takes over) and no profit can be made, return 0.\r\n\r\n### Examples\r\n\r\n```\r\n[50,100,20,80,20]\r\n->\r\n110\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"maxProfit","return":{"type":"java.lang.Integer","comment":"Max profit"},"parameters":[{"name":"prices","type":"[I","comment":"Prices"}]},"test_cases":[{"input":[[50,100,20,80,20]],"output":110},{"input":[[50,100]],"output":50},{"input":[[150,100]],"output":0},{"input":[[50,100,50,100,50]],"output":100},{"input":[[100,40,20,10]],"output":0},{"input":[[0,50,10,100,30]],"output":140},{"input":[[0,100,0,100,0,100]],"output":300},{"input":[[1,2,3,4,3,2,4,5,1,2,3,4,5]],"output":10},{"input":[[1]],"output":0},{"input":[[]],"output":0},{"input":[null],"output":0},{"input":[[1,1]],"output":0}],"_id":"yVX9lswEcKsYwZDg"}
{"id":"is-string-unique","title":"Is String Unique","description":"Implement method `isUniqueChars` with an algorithm to determine if a ASCII string has all unique characters. \r\n\r\nWhat if you cannot use additional data structures?\r\n\r\n### Examples\r\n\r\n* `\"AdSda\"` -> `false`","time_limit":1,"memory_limit":32,"level":1,"function":{"name":"isUniqueChars","return":{"type":"java.lang.Boolean","comment":" Indicate if string contains only unique chars"},"parameters":[{"name":"str","type":"java.lang.String","comment":"input string to be checked (ASCII)"}]},"test_cases":[{"input":[""],"output":true},{"input":[null],"output":true},{"input":["abc"],"output":true},{"input":["AdSda"],"output":false},{"input":["AbcdefgHA"],"output":false},{"input":["edcvfrtyy"],"output":false},{"input":["AA"],"output":false},{"input":["AdSa"],"output":true},{"input":[" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"],"output":true},{"input":[" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~a"],"output":false}],"_id":"z7kBegCko1uRGNaV"}
{"id":"zero-matrix","title":"Zero Matrix","description":"Write a method `zeroMatrix` with an algorithm such that if an element in a MxN matrix is 0, its entire row and column are set to 0. Matrix should be changed in place.\r\n\r\n### Examples\r\n\r\n```\r\n[[1, 2, 3, 4],\r\n [5, 6, 7, 8],\r\n [9, 0, 1, 2],\r\n [3, 4, 5, 0]]\r\n->\r\n[[1, 0, 3, 0],\r\n [5, 0, 7, 0],\r\n [0, 0, 0, 0],\r\n [0, 0, 0, 0]]\r\n```","time_limit":1,"memory_limit":32,"level":2,"function":{"name":"zeroMatrix","return":{"type":"void","comment":" Operation in place"},"parameters":[{"name":"matrix","type":"[[I","comment":"Matrix to set zeros"}]},"test_cases":[{"input":[[[1,2,3,4],[5,6,7,8],[9,0,1,2],[3,4,5,0]]],"output":[[1,0,3,0],[5,0,7,0],[0,0,0,0],[0,0,0,0]]},{"input":[[[0,2,3,4],[5,6,0,8],[9,0,1,2],[3,4,5,0]]],"output":[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},{"input":[[[0]]],"output":[[0]]},{"input":[[[1]]],"output":[[1]]}],"_id":"zu2tQkn7E7xfiA3W"}
